// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: workouts.proto

package workouts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "trailbox/gen/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Workouts_GetWorkout_FullMethodName   = "/trailbox.workouts.Workouts/GetWorkout"
	Workouts_ListWorkouts_FullMethodName = "/trailbox.workouts.Workouts/ListWorkouts"
)

// WorkoutsClient is the client API for Workouts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkoutsClient interface {
	GetWorkout(ctx context.Context, in *common.UserId, opts ...grpc.CallOption) (*Workout, error)
	ListWorkouts(ctx context.Context, in *ListWorkoutsRequest, opts ...grpc.CallOption) (*ListWorkoutsResponse, error)
}

type workoutsClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkoutsClient(cc grpc.ClientConnInterface) WorkoutsClient {
	return &workoutsClient{cc}
}

func (c *workoutsClient) GetWorkout(ctx context.Context, in *common.UserId, opts ...grpc.CallOption) (*Workout, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Workout)
	err := c.cc.Invoke(ctx, Workouts_GetWorkout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutsClient) ListWorkouts(ctx context.Context, in *ListWorkoutsRequest, opts ...grpc.CallOption) (*ListWorkoutsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkoutsResponse)
	err := c.cc.Invoke(ctx, Workouts_ListWorkouts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkoutsServer is the server API for Workouts service.
// All implementations must embed UnimplementedWorkoutsServer
// for forward compatibility.
type WorkoutsServer interface {
	GetWorkout(context.Context, *common.UserId) (*Workout, error)
	ListWorkouts(context.Context, *ListWorkoutsRequest) (*ListWorkoutsResponse, error)
	mustEmbedUnimplementedWorkoutsServer()
}

// UnimplementedWorkoutsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkoutsServer struct{}

func (UnimplementedWorkoutsServer) GetWorkout(context.Context, *common.UserId) (*Workout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkout not implemented")
}
func (UnimplementedWorkoutsServer) ListWorkouts(context.Context, *ListWorkoutsRequest) (*ListWorkoutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkouts not implemented")
}
func (UnimplementedWorkoutsServer) mustEmbedUnimplementedWorkoutsServer() {}
func (UnimplementedWorkoutsServer) testEmbeddedByValue()                  {}

// UnsafeWorkoutsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkoutsServer will
// result in compilation errors.
type UnsafeWorkoutsServer interface {
	mustEmbedUnimplementedWorkoutsServer()
}

func RegisterWorkoutsServer(s grpc.ServiceRegistrar, srv WorkoutsServer) {
	// If the following call pancis, it indicates UnimplementedWorkoutsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Workouts_ServiceDesc, srv)
}

func _Workouts_GetWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutsServer).GetWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workouts_GetWorkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutsServer).GetWorkout(ctx, req.(*common.UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workouts_ListWorkouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutsServer).ListWorkouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workouts_ListWorkouts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutsServer).ListWorkouts(ctx, req.(*ListWorkoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Workouts_ServiceDesc is the grpc.ServiceDesc for Workouts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Workouts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trailbox.workouts.Workouts",
	HandlerType: (*WorkoutsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkout",
			Handler:    _Workouts_GetWorkout_Handler,
		},
		{
			MethodName: "ListWorkouts",
			Handler:    _Workouts_ListWorkouts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workouts.proto",
}
